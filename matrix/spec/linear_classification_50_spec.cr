require "./spec_helper"

describe Neuratron::LinearModel do
  it "linear classification" do
    inputs = [
      [1.0, 2.0],
      [1.5, 2.5],
      [3.0, 4.0],
      [3.2, 4.5],
      [3.7, 4.4],
      [3.5, 4.5],
      [4.7, 6.1],
      [5.4, 5.4],
      [5.2, 5.2],
      [4.3, 4.3],

      [5.5, 5.5],
      [5.0, 5.5],
      [6.0, 6.0],
      [-0.23, -0.04],
      [-0.39, 0.89],
      [-0.30, 1.80],
      [-0.03, 2.58],
      [-0.35, 4.16],
      [0.24, 4.64],
      [-0.24, 6.07],

      [0.14, 7.33],
      [1.00, 0.18],
      [1.40, 0.71],
      [1.12, 1.52],
      [0.68, 3.08],
      [0.78, 4.32],
      [0.73, 5.00],
      [1.49, 6.02],
      [0.59, 7.14],
      [1.80, 0.31],

      [2.13, 0.54],
      [1.80, 1.67],
      [1.75, 3.21],
      [2.14, 4.05],
      [1.90, 4.52],
      [2.02, 6.33],
      [1.54, 7.11],
      [3.21, 0.04],
      [2.93, 0.98],
      [2.78, 1.58],

      [2.76, 2.66],
      [2.90, 3.83],
      [3.36, 4.65],
      [2.69, 5.85],
      [2.73, 7.47],
      [3.69, 0.07],
      [3.63, 1.28],
      [3.65, 1.60],
      [3.62, 3.40],
      [3.62, 3.70],

      [4.16, 5.11],
      [3.74, 6.04],
      [4.47, 7.01],
      [4.68, 0.23],
      [5.22, 0.52],
      [4.86, 1.69],
      [5.27, 3.02],
      [4.66, 3.98],
      [4.86, 5.07],
      [5.33, 6.38],

      [5.08, 6.74],
      [5.78, 0.16],
      [5.88, 1.34],
      [5.71, 2.01],
      [6.34, 2.51],
      [5.84, 4.46],
      [6.13, 4.89],
      [6.02, 6.20],
      [5.57, 6.52],
      [6.79, -0.15],

      [6.63, 1.00],
      [7.24, 2.45],
      [6.53, 2.66],
      [7.02, 4.16],
      [6.56, 4.92],
      [6.70, 6.27],
      [6.95, 6.86],
    ]
    expected_outputs = [
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [-1.0],

      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [-1.0],

      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [-1.0],

      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [-1.0],

      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [-1.0],

      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [-1.0],

      [1.0],
      [1.0],
      [-1.0],
      [-1.0],
      [1.0],
      [1.0],
    ]

    model = Neuratron::LinearModel.new(2, 1)
    model.train(inputs.flatten, expected_outputs.flatten)

    predictions = inputs.map do |input|
      puts "Predict for #{input}"
      results = model.predict(input, Neuratron::LinearModel::Classification.new)
      puts "Prediction #{results}"
      results
    end

    positions = inputs.zip(predictions).map do |data|
      { data[0][0], data[0][1], data[1] }
    end

    pp "positions", positions

    math_formulat = "#{model.weights[0]} * 1 + #{model.weights[1]} * x + #{model.weights[2]} * y"
    fns = [
      AquaPlot::Scatter3D.from_points(positions).tap(&.set_title("Points")),
      AquaPlot::Function.new("0", title: "0"),
      # AquaPlot::Function.new(math_formulat, title: math_formulat),
    ]

    pp fns[-1].style = "pm3d"

    plt = AquaPlot::Plot3D.new fns
    plt.set_key("left box")
    plt.show
    plt.set_view(100, 80, 1)
    plt.show
    plt.close
  end
end
